// ============================================
// RenzMcLang Example
// 100% Pure RenzMcLang Code with Flask
// ============================================

// Bagian ini adalah program utama untuk menjalankan website dokumentasi RenzMcLang.
// Program ditulis full menggunakan sintaks khas RenzMcLang tapi tetap memanggil Python (Flask, Markdown, dll).
// Jadi, bisa dibilang ini seperti jembatan antara bahasa custom RenzMcLang dengan dunia nyata (Python + Flask).
// Website ini dirancang untuk menampilkan file dokumentasi dalam format markdown
// lalu dikonversi otomatis menjadi HTML agar mudah dibaca di browser.
// Ada sistem template, error handling, konversi markdown, dan ekstraksi metadata.
// Semua fungsi dibuat modular agar lebih mudah dikelola dan dipahami.

tampilkan "=== RenzMcLang Documentation Website ==="
tampilkan "Initializing Flask application..."

// Import library Python yang diperlukan
// - flask â†’ framework web Python
// - markdown2 â†’ library untuk convert teks markdown ke HTML
// - os â†’ library sistem operasi (untuk akses file, path, dll)
// - re â†’ regular expression (untuk ekstrak data spesifik dari teks)
impor_python "flask" sebagai Flask
impor_python "markdown2"
impor_python "os"
impor_python "re"

// Membuat objek Flask sebagai inti aplikasi web.
// Objek `app` ini yang nantinya akan menangani request, route, dan response.
app itu panggil_python Flask.Flask("renzmc_docs")

// Konfigurasi Flask, agar aplikasi lebih fleksibel.
// - TEMPLATES_AUTO_RELOAD: True â†’ agar template otomatis reload tanpa restart server
// - SEND_FILE_MAX_AGE_DEFAULT: 0 â†’ menonaktifkan cache file statis (bagus untuk dev)
panggil_python app.config.update({
    "TEMPLATES_AUTO_RELOAD": benar,
    "SEND_FILE_MAX_AGE_DEFAULT": 0
})

tampilkan "âœ“ Flask app created successfully"

// ============================================
// Helper Functions
// ============================================

// Di bawah ini adalah kumpulan fungsi bantu (helper functions).
// Tujuannya agar kode lebih rapih, reusable, dan modular.
// Setiap fungsi dibuat khusus untuk tugas tertentu seperti membaca file,
// mengubah markdown ke HTML, atau mengekstrak metadata dari teks.

// Fungsi baca_file_markdown: membaca file markdown dari folder docs.
fungsi baca_file_markdown(nama_file):
    tampilkan f"Reading markdown file: {nama_file}"
    
    // Tentukan path file markdown (misal docs/intro.md)
    file_path itu f"docs/{nama_file}.md"
    
    coba
        // Coba buka file dengan mode baca UTF-8
        dengan buka(file_path, "r", encoding="utf-8") sebagai f
            konten itu f.read()
        selesai
        
        tampilkan f"âœ“ File read successfully: {file_path}"
        hasil konten
    tangkap Exception sebagai e
        // Jika ada error (file tidak ada atau rusak), tampilkan pesan error
        tampilkan f"âœ— Error reading file: {e}"
        hasil salah
    selesai
selesai

// Fungsi konversi_markdown_ke_html: mengubah teks markdown jadi HTML.
// Fungsi ini menggunakan library markdown2 agar mendukung fitur-fitur ekstra.
fungsi konversi_markdown_ke_html(markdown_text):
    tampilkan "Converting markdown to HTML..."
    
    coba
        // Fitur tambahan markdown2:
        // - fenced-code-blocks: blok kode pakai triple backtick
        // - tables: mendukung tabel markdown
        // - header-ids: otomatis buat ID di heading
        // - code-friendly: agar tanda khusus tidak rusak
        // - cuddled-lists: dukung format list lebih fleksibel
        // - strike: teks coret
        // - task_list: checkbox di markdown
        extras_list itu ["fenced-code-blocks", "tables", "header-ids", "code-friendly", "cuddled-lists", "strike", "task_list"]
        
        // Panggil markdown2 untuk konversi teks
        html itu panggil_python markdown2.markdown(markdown_text, extras=extras_list)
        
        tampilkan "âœ“ Markdown converted successfully"
        hasil html
    tangkap Exception sebagai e
        // Jika konversi gagal, tampilkan pesan error sederhana ke user
        tampilkan f"âœ— Error converting markdown: {e}"
        hasil "<p>Error converting markdown content</p>"
    selesai
selesai

// Fungsi ekstrak_metadata: mengambil info tambahan dari markdown.
// Metadata biasanya ditulis di atas dokumen, misal:
// **Version:** 1.0
// **Last Updated:** 2025-10-05
fungsi ekstrak_metadata(markdown_text):
    tampilkan "Extracting metadata from markdown..."
    
    metadata itu {}
    
    // Ambil versi pakai regex
    version_match itu panggil_python re.search(r"\*\*Version:\*\*\s*(\S+)", markdown_text)
    jika version_match
        metadata["version"] itu panggil_python version_match.group(1)
    selesai
    
    // Ambil informasi "last updated" pakai regex
    updated_match itu panggil_python re.search(r"\*\*Last Updated:\*\*\s*(\S+)", markdown_text)
    jika updated_match
        metadata["updated"] itu panggil_python updated_match.group(1)
    selesai
    
    tampilkan f"âœ“ Metadata extracted: {metadata}"
    hasil metadata
selesai

// Fungsi dapatkan_judul_dari_file: bikin judul rapi dari nama file.
// Misal nama_file = "cara-install" â†’ hasil = "Cara Install"
fungsi dapatkan_judul_dari_file(nama_file):
    // Gunakan method title() di Python agar kapitalisasi otomatis
    judul_python itu panggil_python nama_file.replace("-", " ").title()
    hasil judul_python
selesai

tampilkan "âœ“ Helper functions defined"

// ============================================
// Routes
// ============================================

// Di bagian ini kita mendefinisikan route/endpoint dari web.
// Route adalah URL yang bisa diakses user, lalu diarahkan ke fungsi tertentu.
// Contoh: "/" â†’ home, "/docs/<nama_file>" â†’ tampilkan dokumentasi tertentu.

tampilkan "Defining routes..."

// Fungsi home: menampilkan halaman depan (home page).
fungsi home():
    tampilkan "â†’ Serving home page"
    hasil panggil_python Flask.render_template("home.html")
selesai

// Fungsi show_doc: menampilkan halaman dokumentasi sesuai nama file.
// Misal "/docs/intro" â†’ akan membaca file docs/intro.md lalu ditampilkan di web.
fungsi show_doc(doc_name):
    tampilkan f"â†’ Serving documentation: {doc_name}"
    
    // Baca isi file markdown
    markdown_content itu baca_file_markdown(doc_name)
    
    jika markdown_content == salah
        // Kalau file tidak ada, tampilkan halaman 404
        tampilkan f"âœ— Document not found: {doc_name}"
        hasil panggil_python Flask.render_template(
            "doc.html", 
            title="Document Not Found", 
            content="<h1>404 - Document Not Found</h1><p>The requested documentation page could not be found.</p>", 
            meta={}
        )
    selesai
    
    // Ambil metadata dari file
    metadata itu ekstrak_metadata(markdown_content)
    
    // Konversi markdown â†’ HTML
    html_content itu konversi_markdown_ke_html(markdown_content)
    
    // Dapatkan judul berdasarkan nama file
    judul itu dapatkan_judul_dari_file(doc_name)
    
    tampilkan f"âœ“ Rendering document: {judul}"
    
    // Render halaman HTML dengan template
    hasil panggil_python Flask.render_template("doc.html", title=judul, content=html_content, meta=metadata)
selesai

// Fungsi page_not_found: handler untuk error 404.
// Akan dipanggil otomatis jika user buka halaman yang tidak ada.
fungsi page_not_found(e):
    tampilkan f"âœ— 404 Error: {e}"
    hasil panggil_python Flask.render_template(
        "doc.html", 
        title="Page Not Found", 
        content="<h1>404 - Page Not Found</h1><p>The page you are looking for does not exist.</p>", 
        meta={}
    ), 404
selesai

// Fungsi internal_error: handler untuk error 500 (server error).
// Akan ditampilkan jika ada bug atau masalah internal.
fungsi internal_error(e):
    tampilkan f"âœ— 500 Error: {e}"
    hasil panggil_python Flask.render_template(
        "doc.html", 
        title="Internal Server Error", 
        content="<h1>500 - Internal Server Error</h1><p>Something went wrong on our end. Please try again later.</p>", 
        meta={}
    ), 500
selesai

// Daftarkan route menggunakan add_url_rule.
// "/" diarahkan ke fungsi home, "/docs/<doc_name>" diarahkan ke show_doc.
panggil_python app.add_url_rule("/", "home", home)
panggil_python app.add_url_rule("/docs/<doc_name>", "show_doc", show_doc)

// Daftarkan handler error agar otomatis dipanggil
panggil_python app.register_error_handler(404, page_not_found)
panggil_python app.register_error_handler(500, internal_error)

tampilkan "âœ“ Routes and error handlers configured"

// ============================================
// Main
// ============================================

// Bagian main ini yang akan jalan pertama kali saat program dieksekusi.
// Menampilkan info startup, lalu menjalankan server Flask.

tampilkan ""
tampilkan "==================================="
tampilkan "ðŸš€ Starting RenzMcLang Documentation Website"
tampilkan "==================================="
tampilkan ""
tampilkan "Server will start on http://0.0.0.0:9000"
tampilkan "Press CTRL+C to stop the server"
tampilkan ""

// Jalankan aplikasi Flask di host 0.0.0.0 port 9000.
// Debug = False agar lebih stabil (tidak reload otomatis).
panggil_python app.run(host="0.0.0.0", port=port, debug=salah)
